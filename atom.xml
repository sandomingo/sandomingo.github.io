<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[San Domingo's Blog]]></title>
  <link href="http://sandomingo.github.io/atom.xml" rel="self"/>
  <link href="http://sandomingo.github.io/"/>
  <updated>2014-10-19T17:11:34+08:00</updated>
  <id>http://sandomingo.github.io/</id>
  <author>
    <name><![CDATA[San Domingo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Class Not Found Exception and Error]]></title>
    <link href="http://sandomingo.github.io/blog/2014/07/28/class-not-found-exception-and-error/"/>
    <updated>2014-07-28T15:43:06+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/07/28/class-not-found-exception-and-error</id>
    <content type="html"><![CDATA[<p><strong>java.lang.ClassNotFoundException:</strong></p>

<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ClassNotFoundException.html">Java Doc</a></p>

<pre><code>Thrown when an application tries to load in a class through its string name using:
* The forName method in class Class.
* The findSystemClass method in class ClassLoader .
* The loadClass method in class ClassLoader.
but no definition for the class with the specified name could be found.
</code></pre>

<p>This exception indicates that the class was not found on the classpath. This indicates that we were trying to load the class definition, and the class did not exist on the classpath.</p>

<p>该异常一般在运行时想要动态加载一个类时，发现该类不在classpath上时会被抛出。</p>

<p><strong>java.lang.NoClassDefFoundError:</strong></p>

<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/NoClassDefFoundError.html">Java Doc</a></p>

<pre><code>Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in 
the definition of a class (as part of a normal method call or as part of 
creating a new instance using the new expression) and no definition of the 
class could be found.
</code></pre>

<p>This exception indicates that the JVM looked in its internal class definition data structure for the definition of a class and did not find it. This is different than saying that it could not be loaded from the classpath. Usually this indicates that we previously attempted to load a class from the classpath, but it failed for some reason &ndash; now we&rsquo;re trying to use the class again (and thus need to load it, since it failed last time), but we&rsquo;re not even going to try to load it, because we failed loading it earlier (and reasonably suspect that we would fail again). The earlier failure could be a ClassNotFoundException or an ExceptionInInitializerError (indicating a failure in the static initialization block) or any number of other problems. The point is, a NoClassDefFoundError is not necessarily a classpath problem.</p>

<p>简而言之就是类在加载的时候发生了错误，可能是</p>

<ul>
<li><p>类的静态初始化（块／域）出了问题</p></li>
<li><p>编译成功的.class文件未出现在classpath中</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Going]]></title>
    <link href="http://sandomingo.github.io/blog/2014/07/23/keep-going/"/>
    <updated>2014-07-23T20:52:40+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/07/23/keep-going</id>
    <content type="html"><![CDATA[<p>学艺不精，需要闭门造车几个月。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classpath and Sourcepath]]></title>
    <link href="http://sandomingo.github.io/blog/2014/07/14/classpath-and-sourcepath/"/>
    <updated>2014-07-14T13:43:37+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/07/14/classpath-and-sourcepath</id>
    <content type="html"><![CDATA[<h2>java options</h2>

<h3>-classpath classpath</h3>

<p>Set the user class path, overriding the user class path in the CLASSPATH environment variable. If neither CLASSPATH or -classpath is specified, the user class path consists of the current directory.</p>

<p>If the -sourcepath option is not specified, the user class path is searched for source files as well as class files.</p>

<h3>-sourcepath sourcepath</h3>

<p>Specify the source code path to search for class or interface definitions. As with the user class path, source path entries are separated by semicolons (;) and can be directories, JAR archives, or ZIP archives. If packages are used, the local path name within the directory or archive must reflect the package name.</p>

<p>Note that classes found through the classpath are subject to automatic recompilation if their sources are found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Dependency Mediation]]></title>
    <link href="http://sandomingo.github.io/blog/2014/06/12/maven-dependency-mediation/"/>
    <updated>2014-06-12T16:43:39+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/06/12/maven-dependency-mediation</id>
    <content type="html"><![CDATA[<h1>Maven的依赖调解</h1>

<p>之前自己一直以为maven会选择最新版本的依赖，其实不然，完完全全的错误哇！</p>

<p>其实Maven进行依赖解析时，遵循以下逻辑:</p>

<ul>
<li><p>路径最短优先：根据依赖传递长度，选择拥有最短长度的依赖。</p></li>
<li><p>如果依然存在冲突，则遵循最先声明优先，在pom.xml文件中按从上到下的顺序选择依赖。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[32bit or 64bit]]></title>
    <link href="http://sandomingo.github.io/blog/2014/05/29/32bit-or-64bit/"/>
    <updated>2014-05-29T23:31:49+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/05/29/32bit-or-64bit</id>
    <content type="html"><![CDATA[<p>CPU支持32位和64位，操作系统kernel分为32位和64位</p>

<h2>概念</h2>

<p>//TODO</p>

<h2>衍生</h2>

<p>早年09年macbook air高配，只有2GB的内存，升级了10.9的Mavericks后，开机便占用了1.5G以上的内存，想再打开其他应用已经成为妄想。
可以尝试使用32位kernal模式运行操作系统。
<a href="http://http://support.apple.com/kb/ht3773">reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zsh新手指南]]></title>
    <link href="http://sandomingo.github.io/blog/2014/05/25/i-am-new-to-zsh/"/>
    <updated>2014-05-25T16:34:55+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/05/25/i-am-new-to-zsh</id>
    <content type="html"><![CDATA[<h2>使用技巧</h2>

<ul>
<li>zsh向下兼容bash</li>
<li>更好的历史记录功能：输入部分命令后按上下方向键即可以在向前或者向后查找以此为前缀的历史命令</li>
<li>强大的自动补全：输入一个命令后，之后的命令、参数不知道怎么输入时，可以无脑按tab，一般均会有提示

<ul>
<li>输入 <code>kill</code>，然后<code>tab</code>，会列出当前会话中的所有进程</li>
<li>输入 <code>ssh</code>，然后<code>tab</code>，会出现历史连接的host记录</li>
</ul>
</li>
<li>输入<code>d</code>，可以现实当前会话中访问的目录列表，再输入对应目录的编号即可以跳转到对应目录下</li>
<li>几乎可以省略写<code>cd</code>命令</li>
</ul>


<h2>推荐插件</h2>

<ul>
<li>autojump</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java]不同Jar包中出现同名class引起的程序Bug]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/26/duplicate-class-in-different-jar/"/>
    <updated>2014-04-26T21:53:43+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/26/duplicate-class-in-different-jar</id>
    <content type="html"><![CDATA[<p>最近在研究boilerplate这个页面自动抽取方法，结果遇到了Stack Overflow的问题，报错现实问题在<em>org.cyberneko.html.HTMLTagBalancer.endElement</em>这里。这个问题是偶尔出现，而且频率也不高，追踪了几天，也找不到问题究竟出在哪里。周末有空了，想想还是来认真fix一下这个bug吧。</p>

<p>吸取了之前没有逻辑性的bug追踪过程，这次算是比较有条理的在解决问题，记录下解决思路，希望自己以后不要在栽在这样的坑里了。</p>

<h3>发现问题</h3>

<p>我们的java应用都是用shell脚本启动，在服务器上运行时，报出Stack Overflow的错误。接到报错后，立刻开始调试程序，在本地计算机上用shell脚本启动，也报同样的错误，然后在IDE中调试，一切正常。</p>

<h3>解决思路</h3>

<ol>
<li>google了下这个问题，发现cyberneko官方有issue，承认这是个bug，并在新版本中已经修复。</li>
<li>检查shell脚本，确认传入到Java程序中的参数时正确的。</li>
<li>查看并对比了IDE和shell脚本启动Java程序的jvm参数。发现略有不一样，逐个对比调试发现在shell脚本中使用IDE配置的classpath运行程序竟然没有报错，这下问题定位到错在classpath上了。</li>
<li>将shell和IDE中的classpah拿出来对比，发现cyberneko的版本一致，已经是最新的了。</li>
<li><em>栽入坑中若干小时&hellip;</em>尝试对两个classpath配置逐条对比，并在正确的classpath上逐条来测试，企图重现错误。</li>
<li><strong>许久才联想想到classload加载类的机制，才想到classpath中条目顺序的问题</strong>，试了一下，发现cyberneko和boilerpipe这两个jar包顺序如果颠倒了，就会报错。</li>
<li><p>检查boilerpipe和cyberneko这两个jar包，发现问题根源</p>

<blockquote><p>boilerpipe中竟然copy了cyberneko的两个类的代码，而且包名也没有修改，查看源码后，boilerpipe里copy的代码应该是比较旧版本的，因而导致了报错。</p></blockquote></li>
<li><p>最后便是修复bug，我采取了比较简单的而暴力的方式，将boilerpipe的jar包中copy的代码直接删除，因为我的classpath中有cyberneko的jar包，所以在回归测试时，boilerpipe的抽取算法依然可用，至此，bug修复完毕。</p></li>
</ol>


<h3>事后</h3>

<p>Bug追踪还是得顺藤摸瓜！切忌无脑失错。对于像我这种记性不好的，最好在纸张上记录下整个Bug追踪的线路，这样哪些路已经走过，哪些路走不通，哪些路还可以尝试，一目了然。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac新手指南(编写中)]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/25/i-am-new-to-mac/"/>
    <updated>2014-04-25T14:02:25+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/25/i-am-new-to-mac</id>
    <content type="html"><![CDATA[<p>最近好友aKai终于从Linux阵营倒戈到了OS X，作为一名酷爱DIY的用户，他甚是不习惯OS X的各种操作，问了很多让Mac用户很是意外的简单问题。于是，想想还是在这里记录一下，为了日后有新的小伙伴倒戈来OS X留下入门可读的第一手资料。（本文是基于OS X 10.9.2 Mavericks）</p>

<p><code>本着易学易会的原则，尽可能将缩写、快捷键的完整英文表示写出来，OS X的很多操作都是很直觉式的操作，掌握了其根本思想后，日后自然便驾轻就熟了。因为个人有刨根问底的习惯，所以有引用的地方都尽可能的会给出原始url，例如软件方面，除了App Store，其余的尽量都给出官方下载地址。</code></p>

<p><em>一些简写：Win->Windows系统， app->application</em></p>

<h1>常见概念对应</h1>

<ul>
<li>Finder &ndash;> 资源管理器(Win)</li>
<li>Activity Monitor &ndash;> 任务管理器(Win)</li>
<li><code>cmd</code>键 &ndash;> Ctrl键(Win，绝大多数情况下)</li>
</ul>


<h1>安装软件</h1>

<p>OS X上安装软件其实更像是Win和Linux的结合体，一般有一下几种安装方式:</p>

<ol>
<li>如同Linux的软件中心，OS X有App Store，搜索软件，点击安装，输入apple ID确认即可。</li>
<li>如同Win的iso光盘镜像，OS X有dmg(Disk Image)格式的镜像，双击打开后一般会自动弹出一个窗口，一般包括一个app后缀的文件，和一个Applications文件夹的软连接（快捷方式 for Win用户），只需要拖动app文件放入Applications文件夹即可。

<ul>
<li><em>如果发现双击后没有弹出任何窗口，可以在Finder的左边栏->设备(Devices)中找到刚刚点击的光盘镜像，点击后可以在Finder窗口中发现app文件和Applications文件夹。这里的Applications软链接指向的是/Applications文件夹，这也可以在Finder的左边栏里找到。可以直接把app文件拖入该文件夹完成安装。</em></li>
</ul>
</li>
<li>如同Linux中的rpm安装包，Win的exe安装包，OS X有pkg安装包，直接双击，按照提示完成安装即可。

<ul>
<li><em>有时pkg安装包会封装在光盘镜像dmg中，也按照pkg安装包的方式安装即可。</em></li>
</ul>
</li>
<li>如同Linux的apt-get, yum包管理工具命令，OS X有brew，详细使用可google brew。</li>
</ol>


<h1>日常操作</h1>

<h3>打开软件</h3>

<p>Win用户和Linux会把常用的软件放在桌面上，而OS X一般是将常用的软件放在Dock上。所有安装的软件都可以在/Applications文件夹里或点击Dock上的Launchpad找到。更快捷的方式是使用spotlight(屏幕右上角的放大镜)根据应用名来快速检索并打开应用。</p>

<h3>关机</h3>

<p>合上屏幕即可，OS X拥有混合睡眠的待机模式，不需要关机，合上屏幕即可带走，打开屏幕便可以使用。</p>

<h1>系统设置</h1>

<h3>虚拟桌面</h3>

<p>打开Mission Control.app，将鼠标滑到屏幕右上角的区域，会出现一个添加桌面的按钮，点击即可。</p>

<h1>快捷键篇</h1>

<p>OS X的默认快捷键一般是基于<code>ctrl</code>, <code>opt</code>, <code>cmd</code> (分别对应control, option, command键)加上其他按键组合完成的。</p>

<h3>功能键符号注释</h3>

<ul>
<li>↵ &ndash;> <code>return</code></li>
<li>⇥ &ndash;> <code>tab</code></li>
<li>⎋ &ndash;> <code>esc</code></li>
<li>⇧ &ndash;> <code>shift</code></li>
<li>⌫ &ndash;> <code>delete</code></li>
<li>⌃ &ndash;> <code>control</code></li>
<li>⌥ &ndash;> <code>option</code></li>
<li>⌘ &ndash;> <code>command</code></li>
</ul>


<p><em>贴两张图，保证直观</em></p>

<p><img src="http://sandomingo.github.io/images/misc/keyboard.png">
<img src="http://sandomingo.github.io/images/misc/keyboard_full.png"></p>

<h3>截图</h3>

<ul>
<li><code>cmd</code> + <code>shift</code> + <code>3</code> 截屏(等价于Print Screen)，保存到桌面</li>
<li><code>cmd</code> + <code>shift</code> + <code>ctrl</code> + <code>3</code> 截屏，保存剪贴板</li>
<li><code>cmd</code> + <code>shift</code> + <code>4</code> (+ <code>space</code> )截屏，自定义区域截图(指定窗口截图)</li>
<li><code>cmd</code> + <code>shift</code> + <code>ctrl</code> + <code>4</code> (+ <code>space</code> )截屏，自定义区域选取(指定窗口截图)</li>
</ul>


<h3>日常操作</h3>

<ul>
<li>在launchpad中按住<code>opt</code>键，可以删除软件(也可以直接去Applications文件夹中删除)

<h3>日常编辑</h3></li>
<li><code>cmd</code> + <code>c</code> 复制</li>
<li><code>cmd</code> + <code>v</code> 粘贴</li>
<li><code>cmd</code> + <code>opt</code> + <code>v</code> 移动(剪切操作对应为：先复制，再移动)</li>
<li><code>return</code> 文件重命名(!!!不是打开文件，如果需要打开文件，请使用下一条命令)</li>
<li><code>cmd</code> + <code>o</code> 打开文件</li>
<li><code>space</code> 快速预览文件</li>
<li><code>delete</code> 删除前一个字符</li>
<li><code>fn</code> + <code>delete</code> 删除后一个字符</li>
</ul>


<h3>终端操作</h3>

<ul>
<li><code>(current-path)$ open .</code>  在终端中打开Finder并定位到current-path(pwd所对应路径)</li>
</ul>


<h3>其他按键</h3>

<p>基于方向键的组合按键也可以产生很多实用的功能</p>

<ul>
<li><code>fn</code> + <code>up</code> = scroll up</li>
<li><code>fn</code>+ <code>down</code> = scroll down</li>
<li><code>fn</code> + <code>shift</code> + <code>up</code> = page up</li>
<li><code>fn</code>+ <code>shift</code> + <code>down</code> = page down</li>
<li><code>fn</code> + <code>left</code> = top</li>
<li><code>fn</code> + <code>right</code> = bottom</li>
<li><code>opt</code> + <code>left</code>/<code>right</code> = 输入光标按词移动</li>
<li><code>cmd</code> + <code>left</code> = 输入光标移动到行首</li>
<li><code>cmd</code> + <code>right</code> = 输入光标移动到行尾</li>
</ul>


<h1>常用软件</h1>

<ul>
<li><a href="http://mplayerx.org/download.html">MPlayerX</a>: 视频播放器，支持很多格式</li>
<li>iTunes (系统自带) 听音乐，Podcast</li>
<li><a href="http://www.macupdate.com/app/mac/23430/x-lossless-decoder">XLD</a>: 无损音频解码器，支持无损格式的音乐播放</li>
<li><a href="http://www.obdev.at/products/launchbar/download.html">LaunchBar</a>: 桌面启动器，比spotlight更好用（升Yosemite后估计就不太用得着了）的借助索引的启动器，剪贴板功能很实用，而且可以免费实用(Alfred好贵..TAT)</li>
<li><a href="http://www.eudic.net/">Eudic</a> 词典，支持屏幕取词和划词解释。</li>
</ul>


<h1>开发者常用工具</h1>

<p>如果你是一名程序开发者，以下工具还是建议安装的，至少让我个人觉得很是方便。</p>

<ul>
<li><p><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>: 更好用的终端zsh
  安装命令： 在终端下执行 <code>curl -L http://install.ohmyz.sh | sh</code></p></li>
<li><p><a href="http://brew.sh">brew</a>: mac下的软件包管理工具
  安装命令：在终端下执行 <code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</code></p></li>
<li><p><a href="http://iterm2.com/downloads.html">iTerm2</a>: 更好用的终端，其中的分屏功能很实用。</p></li>
<li><a href="http://www.sublimetext.com/2">Sublime Text2</a>: 轻便的文本编辑器</li>
<li><a href="http://mouapp.com/">Mou</a>: Markdown编辑器</li>
<li><a href="http://www.sequelpro.com/">Sequel Pro</a>: MySQL客户端</li>
<li>Wunderlist(App Store): Go-To-Do软件，跨平台，免费</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给MacBook Pro换SSD]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/18/replace-macbook-pros-hdd-with-an-ssd/"/>
    <updated>2014-04-18T13:09:06+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/18/replace-macbook-pros-hdd-with-an-ssd</id>
    <content type="html"><![CDATA[<p>最近越来越感觉到HDD拖慢了自己工作的效率，尤其是从深度睡眠状态恢复时，更是慢到令人无法忍受，思来想去，也是时候体验一下SSD的速度了，那么就动手吧。</p>

<h3>准备工作</h3>

<p>SSD一块，PH00(十字)、T6(六角)号螺丝刀、OS X安装盘(这里使用移动硬盘制作了一个bootable的安装器来替代)。
<img src="http://sandomingo.github.io/images/install_ssd/tools.JPG"></p>

<p>制作一个Bootable OS X installer(这里制作的是Mavericks的installer)：</p>

<blockquote><ol>
<li><p>去App Store下载OS X，下载完后不要点安装，可以再/Applications/目录下找到Install OS X Mavericks.app。</p></li>
<li><p>准备一个有8GB或者以上容量的U盘，或者移动硬盘(我是给移动硬盘创建了一个8GB的分区)，插USB，假设挂载在了/Volumes/OSXInstaller目录下。</p></li>
<li><p>使用Install OS X Mavericks.app自带的工具来制作启动盘。</p></li>
<li><p>打开终端，执行命令：
   <code>$ /Applications/Install\ OS\ X\ Mavericks.app/Contents/Resources/createinstallmedia</code></p></li>
<li><p>该命令会提示你按一定的格式使用该命令， 应该加上系统安装器的目的路径，如上面假设的/Volumes/OSXInstaller。</p></li>
<li><p>等待一会儿。</p></li>
<li><p>Done.</p></li>
</ol>
</blockquote>

<h3>更换硬盘</h3>

<ul>
<li><p>操作前关机拔电。</p></li>
<li><p>拆开底部面板(记得保持螺丝有序，稍用心看就会发现中间左右两个短螺丝和其他的几颗短螺丝是不一样的)，可以看到HDD在电池旁边。
<img src="http://sandomingo.github.io/images/install_ssd/origin_hdd.JPG"></p></li>
<li><p>取出原有的HDD仅需取下HDD和光驱之间的两颗螺丝。
<img src="http://sandomingo.github.io/images/install_ssd/remove_sidebar.JPG"></p></li>
<li><p>拔出sata数据线。
<img src="http://sandomingo.github.io/images/install_ssd/remove_sata_cable.JPG"></p></li>
<li><p>将HDD周边的4颗螺丝取下，装在SSD上。
<img src="http://sandomingo.github.io/images/install_ssd/set_crews.JPG"></p></li>
<li><p>装入SSD，并固定好螺丝(这里在SSD正面安装了SanDisk提供的衬垫来帮助固定)。
<img src="http://sandomingo.github.io/images/install_ssd/put_ssd2bay.JPG"></p></li>
<li><p>Done.</p>

<blockquote><p>Tips: 建议底部面板完成系统安装后再上螺丝，避免因意外而引起不必要的麻烦。</p></blockquote></li>
</ul>


<h3>安装系统</h3>

<p>因为之前系统被自己折腾的很是糟糕，已经无力回天了，所以<strong>备份好数据</strong>重装系统。
* 插入bootable OS X installer(这里我用的是一个移动硬盘)，按<code>OPTION</code>键，可以进入启动盘的选择界面。
<img src="http://sandomingo.github.io/images/install_ssd/boot2install.JPG"></p>

<ul>
<li><p>使用Disk Utility给新安装的硬盘分区。这里选择一个分区，选择Mac OS Extended(Journaled)分区格式，点击分区下方的<code>OPTION</code>选项，因为我的是intel-based的Mac，所以选择GUID分区表。点击<code>Apply</code>完成分区。
<img src="http://sandomingo.github.io/images/install_ssd/partition.JPG">
<img src="http://sandomingo.github.io/images/install_ssd/partition_schema.JPG"></p></li>
<li><p>关闭Disk Utility, 在菜单中选择安装系统。选择将OS X安装到新的SSD。等待2分钟后，系统自动重启后继续安装，又等待20分钟后，完成安装。
<img src="http://sandomingo.github.io/images/install_ssd/install_os_x.JPG"></p></li>
</ul>


<blockquote><p>如果不需要重装系统，可以事先用TimeMachine备份好自己的系统，然后在菜单中选择从TimeMachine中恢复即可。</p></blockquote>

<h3>结束语</h3>

<p>从现在开始，老Mac又可以跑的飞快咯！使用了一周，总的来说，SSD的更换还是非常值得的，极大的降低了个人撑懒腰、喝水、看风景的频率，工作学习从此更加得心应手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-enable Key Repeat in OS X Mavericks]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/16/re-enable-key-repeat-in-os-x-mavericks/"/>
    <updated>2014-04-16T16:06:20+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/16/re-enable-key-repeat-in-os-x-mavericks</id>
    <content type="html"><![CDATA[<p>今天在安装idealVim的时候，提示我是否需要Enable key repeat，没有过脑子就点了No，结果在vim操作时就有些小崩溃了。长按<code>hjkl</code>时没有办法连续移动。因此还是想办法重新Enable key repeat吧。</p>

<p>在命令行中执行以下命令</p>

<pre><code>$ defaults write -g ApplePressAndHoldEnabled -bool false
</code></pre>

<p>重启，搞定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Pro外接显示器分辨率问题]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/16/macbookpro-external-display-resolution-problem/"/>
    <updated>2014-04-16T15:51:50+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/16/macbookpro-external-display-resolution-problem</id>
    <content type="html"><![CDATA[<p>今天被坑惨了TAT，重新安装了Mavericks后，使用thunderbolt转VGA外接显示器时遇到了分辨率的问题：外接显示器支持1080P的分辨率，但在OS X的Display设置中只能选择最高1280*1024的分辨率。google了许久，尝试了重启、合上盖外接显示器重启，重置NVRM都没有效果。最后在<a href="http://chris.dziemborowicz.com/blog/2012/07/04/fix-external-monitor-resolution-on-macbook-pro-with-retina-display/">这里</a>发现了问题的解决方案。</p>

<p>具体做法很是简单：
打开Displays窗口，默认的分辨率中没有我们需要的1080P
<img src="http://sandomingo.github.io/images/os_x_displays/origin.png">
在外接显示器的分辨率设置中按住键盘上的<code>Option</code>键，再点击 <strong>Scaled</strong> 选项,此时会发现分辨率选项多了很多选择，问题迎刃而解。
<img src="http://sandomingo.github.io/images/os_x_displays/clickWithOption.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 学习笔记(持续更新中)]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/10/my-vim-cheatsheet/"/>
    <updated>2014-04-10T13:35:29+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/10/my-vim-cheatsheet</id>
    <content type="html"><![CDATA[<p>vim的操作操作是基于模式的，常见的模式包括</p>

<ul>
<li>插入模式 (INSERT)</li>
<li>编辑模式 (NORMAL)</li>
<li>可视模式 (VISUAL)</li>
<li>命令行模式 (:)</li>
</ul>


<p>Normal 模式是是最常用的模式，在normal模式下可以通过按键命令进入其他模式，在其他模式下，通过<code>Esc</code>可以回到Normal模式。</p>

<h1>操作</h1>

<h2>编辑模式(Normal)下的操作</h2>

<p>在其他模式下按<code>Esc</code>进入<strong>Normal模式</strong></p>

<blockquote><p>命令</p>

<ul>
<li>hjkl &ndash;> 光标移动，对应为←↓↑→。</li>
<li>0 &ndash;> 光标移动到行头</li>
<li>^ &ndash;> 光标移动到本行第一个非空字符的位置</li>
<li>$ &ndash;> 光标移动到本行行末</li>
<li>g_ &ndash;> 光标移动到本行最后一个非空字符的位置></li>
<li>f&lt;a-char> &ndash;> 在当前行内，光标移动到下一个&lt;a-char>字符所在位置</li>
<li>F&lt;a-char> &ndash;> 同f&lt;a-char>，但为反方向的移动</li>
<li>&lt;a-num>f&lt;a-char> &ndash;> 在当前行内，光标移动到第&lt;a-num>个&lt;a-char>字符所在位置</li>
<li>t&lt;a-char> &ndash;> 在当前行内，光标移动到第一个&lt;a-char>字符的前一个字符位置</li>
<li>T&lt;a-char> &ndash;> 同t&lt;a-char>, 但为反方向移动</li>
<li>&lt;Line-Number>G &ndash;> 光标跳到&lt;Line-Number>指定的行</li>
<li>gg &ndash;> 到第一行</li>
<li>G &ndash;> 到最后一行</li>
<li>w &ndash;> 光标移动到下一个单词(word)的开头</li>
<li>b &ndash;> 光标移动到上一个单词(word)的开头</li>
<li>e &ndash;> 光标移动到下一个单词的末尾(end)</li>
<li>ge &ndash;> 光标移动到上一个单词的末尾(end)</li>
<li>% &ndash;> 在当前行将光标移动到括号所在位置，多次按％可以在多个多个括号之间切换</li>
<li>* &ndash;> 将光标移动到当前匹配当前光标所在词的下一个</li>
<li># &ndash;> 将光标移动到当前匹配当前光标所在词的上一个</li>
<li>u &ndash;> 撤销上一次操作(undo)</li>
<li>&lt;C-r> &ndash;> 恢复上一次操作(redo)</li>
<li>/&lt;a-pattern> &ndash;> 搜索匹配&lt;a-pattern>的字符，按n可以跳到下一个匹配项</li>
<li>x &ndash;> 删除当前字符</li>
<li>dd &ndash;> 删除当前行，并保存到剪贴板</li>
<li>d&lt;a-char> &ndash;> 在当前行内，删除光标位置到&lt;a-char>之前的字符</li>
<li>p &ndash;> 粘贴</li>
<li>a &ndash;> 在光标后插入(append)，并进入插入模式</li>
<li>A &ndash;> 在行末插入，并进入插入模式</li>
<li>o &ndash;> 在当前行前插入，并进入插入模式</li>
<li>O &ndash;> 在当前行后插入，并进入插入模式</li>
<li>cw &ndash;> 替换从光标所在位置到一个单词结尾的字符(change word)，并进入插入模式</li>
<li>ZZ &ndash;> 保存并退出</li>
<li>. &ndash;> 小数点，重复上一个命令</li>
<li>&lt;a-num>&lt;a-command> &ndash;> 重复执行&lt;a-num>次&lt;a-command>命令</li>
<li>gUU &ndash;> 将当前行的字符串变大写</li>
<li>guu &ndash;> 将当前行的字符串变小写</li>
<li>yy &ndash;> 拷贝当前行</li>
<li>ye &ndash;> 拷贝光标所在位置到本单词最后一个字符的字符串</li>
<li>>> &ndash;> 当前行向右缩减</li>
<li>&lt;&lt; &ndash;> 当前行向左缩进</li>
<li>== &ndash;> 自动缩减</li>
<li>J => 删除当前行的换行符，即将下一行与当前行连接起来</li>
</ul>
</blockquote>

<h2>插入模式下的操作</h2>

<p>在Normal模式中输入<code>i</code>进入<strong>插入模式</strong></p>

<blockquote><p>命令</p>

<ul>
<li>&lt;C-n> &ndash;> 自动补全，next</li>
<li>&lt;C-p> &ndash;> 自动补全，previous</li>
</ul>
</blockquote>

<h2>可视模式下的操作</h2>

<p>在Normal模式中输入<code>v</code>进入<strong>可视模式</strong></p>

<blockquote><p>命令</p>

<ul>
<li>hjkl &ndash;> 或使用←↓↑→来创建选区</li>
<li>i&lt;an-object> &ndash;> 区域选择，不包括&lt;an-object>的区域，&lt;an-object>可以为一个字符，或者一个单词</li>
<li>a&lt;an-object> &ndash;> 区域选择，包括&lt;an-object>的区域</li>
</ul>
</blockquote>

<h2>命令行模式下的操作</h2>

<p>在Normal模式中输入<code>:</code>进入<strong>命令行模式</strong></p>

<blockquote><p>命令</p>

<ul>
<li>wq &ndash;> 保存并退出</li>
<li>x &ndash;> 保存并退出</li>
<li>w &ndash;> 保存，可以加文件名w filename</li>
<li>q &ndash;> 退出</li>
<li>q! &ndash;> 不保存退出</li>
<li>e <path2file> &ndash;> 打开一个文件</li>
<li>saveas <path2file> &ndash;> 另存为</li>
<li>n &ndash;> 切换到下一个文件</li>
<li>&lt;Line-Number> &ndash;> 光标跳转到&lt;Line-Number>指定行</li>
<li>%s/foo/bar/g &ndash;> 在全局(globle)替换foo为bar</li>
<li>%s/foo/bar/gcI &ndash;> 在全局(globle)替换foo为bar，需要确认(commit)，并且忽略(Ignore)大小写</li>
<li>s/foo/bar/g &ndash;> 在光标当前所在行全局(globle)替换foo为bar</li>
</ul>
</blockquote>

<h2>其他技巧</h2>

<blockquote><p>块操作</p>

<ol>
<li>&lt;C-v> &ndash;> 开始块操作</li>
<li>&lt;C-n> &ndash;> 向下选择块，(也可以使用其他方式来选择)</li>
<li>&lt;any-command><code>ESC</code> &ndash;> 执行command，<code>ESC</code>键使得操作对区块的每一行生效</li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geek Alphabet]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/06/geek-alphabet/"/>
    <updated>2014-04-06T21:04:48+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/06/geek-alphabet</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th align="left">Letter </th>
<th align="center"> Name</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Α α    </td>
<td align="center"> alpha</td>
</tr>
<tr>
<td align="left">Β β    </td>
<td align="center"> beta</td>
</tr>
<tr>
<td align="left">Γ γ    </td>
<td align="center"> gamma</td>
</tr>
<tr>
<td align="left">Δ δ    </td>
<td align="center"> delta</td>
</tr>
<tr>
<td align="left">Ε ε    </td>
<td align="center"> epsilon</td>
</tr>
<tr>
<td align="left">Ζ ζ    </td>
<td align="center"> zeta</td>
</tr>
<tr>
<td align="left">Η η    </td>
<td align="center"> eta</td>
</tr>
<tr>
<td align="left">Θ θ    </td>
<td align="center"> theta</td>
</tr>
<tr>
<td align="left">Ι ι    </td>
<td align="center"> iota</td>
</tr>
<tr>
<td align="left">Κ κ    </td>
<td align="center"> kappa</td>
</tr>
<tr>
<td align="left">Λ λ    </td>
<td align="center"> lambda</td>
</tr>
<tr>
<td align="left">Μ μ    </td>
<td align="center"> mu</td>
</tr>
<tr>
<td align="left">Ν ν    </td>
<td align="center"> nu</td>
</tr>
<tr>
<td align="left">Ξ ξ    </td>
<td align="center"> xi</td>
</tr>
<tr>
<td align="left">Ο ο    </td>
<td align="center"> omicron</td>
</tr>
<tr>
<td align="left">Π π    </td>
<td align="center"> pi</td>
</tr>
<tr>
<td align="left">Ρ ρ    </td>
<td align="center"> rho</td>
</tr>
<tr>
<td align="left">Σ σ    </td>
<td align="center"> sigma</td>
</tr>
<tr>
<td align="left">Τ τ    </td>
<td align="center"> tau</td>
</tr>
<tr>
<td align="left">Υ υ    </td>
<td align="center"> upsilon</td>
</tr>
<tr>
<td align="left">Φ φ    </td>
<td align="center"> phi</td>
</tr>
<tr>
<td align="left">Χ χ    </td>
<td align="center"> chi</td>
</tr>
<tr>
<td align="left">Ψ ψ    </td>
<td align="center"> psi</td>
</tr>
<tr>
<td align="left">Ω ω    </td>
<td align="center"> omega</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux历史命令快捷操作]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/06/linux-history-shortcut/"/>
    <updated>2014-04-06T20:47:35+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/06/linux-history-shortcut</id>
    <content type="html"><![CDATA[<ul>
<li><p> 查看历史命令：</p>

<ul>
<li>$ history</li>
<li>$ history 100  #最近100条历史记录</li>
</ul>
</li>
<li><p> 快速执行历史记录：</p>

<ul>
<li>方法1: Ctrl+r(reverse intelligent search交互式搜索)，根据输出显示最近输入的命令，再按Ctrl + r会将匹配结果循环展示(Ctrl+g退出)</li>
<li><p>方法2:使用!</p>

<ul>
<li>$ !!  #执行最近一条命令</li>
<li>$ !5  #执行history中编号为5的命令</li>
<li>$ !字符串 #执行命令中最近一条与字符串匹配的命令</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始，第一篇]]></title>
    <link href="http://sandomingo.github.io/blog/2014/04/05/my-init/"/>
    <updated>2014-04-05T02:32:28+08:00</updated>
    <id>http://sandomingo.github.io/blog/2014/04/05/my-init</id>
    <content type="html"><![CDATA[<p>就这么愉快的开始吧！</p>
]]></content>
  </entry>
  
</feed>
